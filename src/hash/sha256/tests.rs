use super::*;

#[test]
fn test_vectors() {
    assert_eq!(
        padded_input(&String::from("abc").as_bytes()),
        vec![
            0x61, 0x62, 0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18
        ]
    );

    assert_eq!(
        hash(&String::from("abc").as_bytes()),
        [
            0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae,
            0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61,
            0xf2, 0x00, 0x15, 0xad
        ]
    );

    assert_eq!(
        padded_input(
            &String::from("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq").as_bytes()
        ),
        vec![
            0x61, 0x62, 0x63, 0x64, 0x62, 0x63, 0x64, 0x65, 0x63, 0x64, 0x65, 0x66, 0x64, 0x65,
            0x66, 0x67, 0x65, 0x66, 0x67, 0x68, 0x66, 0x67, 0x68, 0x69, 0x67, 0x68, 0x69, 0x6a,
            0x68, 0x69, 0x6a, 0x6b, 0x69, 0x6a, 0x6b, 0x6c, 0x6a, 0x6b, 0x6c, 0x6d, 0x6b, 0x6c,
            0x6d, 0x6e, 0x6c, 0x6d, 0x6e, 0x6f, 0x6d, 0x6e, 0x6f, 0x70, 0x6e, 0x6f, 0x70, 0x71,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0xc0,
        ]
    );

    assert_eq!(
        hash(&String::from("abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq").as_bytes()),
        [
            0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e,
            0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4,
            0x19, 0xdb, 0x06, 0xc1
        ]
    )
}

#[test]
fn test_pad_input() {
    fn get_vec_with_length(len: usize, filler: u8) -> Vec<u8> {
        let mut v: Vec<u8> = Vec::with_capacity(len);
        for _ in 0..len {
            v.push(filler);
        }
        v
    }

    for len in 0..=500 {
        let filler: u8 = (len % 256) as u8;
        let v: Vec<u8> = get_vec_with_length(len, filler);
        let length_in_bits = len * 8;

        let actual = padded_input(&v);
        let actual_length_in_bits = actual.len() * 8;

        // Padded length is divisible by 512
        assert!(
            actual_length_in_bits % 512 == 0,
            "Length {} not divisible by 512",
            actual_length_in_bits
        );

        // The first len bytes are the original value
        for b in actual.iter().take(len) {
            assert!(*b == filler, "Byte {} is not {}", *b, filler);
        }

        // The next byte is 0x80
        assert!(actual[len] == 0x80);

        // ... followed by zero or more 0x00 bytes
        for b in actual.iter().take(actual.len() - 8).skip(len + 1) {
            assert!(*b == 0x00);
        }

        // The last 8 bytes contain the length in bits
        // as a big-endian 64 bit unsigned int
        assert!(actual[actual.len() - 8] == ((length_in_bits >> 56) & 0xff) as u8);
        assert!(actual[actual.len() - 7] == ((length_in_bits >> 48) & 0xff) as u8);
        assert!(actual[actual.len() - 6] == ((length_in_bits >> 40) & 0xff) as u8);
        assert!(actual[actual.len() - 5] == ((length_in_bits >> 32) & 0xff) as u8);
        assert!(actual[actual.len() - 4] == ((length_in_bits >> 24) & 0xff) as u8);
        assert!(actual[actual.len() - 3] == ((length_in_bits >> 16) & 0xff) as u8);
        assert!(actual[actual.len() - 2] == ((length_in_bits >> 8) & 0xff) as u8);
        assert!(actual[actual.len() - 1] == (length_in_bits & 0xff) as u8);
    }
}
